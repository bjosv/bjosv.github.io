<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[erlide - an Erlang IDE]]></title>
  <link href="http://erlide.org/atom.xml" rel="self"/>
  <link href="http://erlide.org/"/>
  <updated>2014-04-09T20:28:55+02:00</updated>
  <id>http://erlide.org/</id>
  <author>
    <name><![CDATA[The erlide team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ended support for Eclipse 3.6]]></title>
    <link href="http://erlide.org/blog/2013/04/11/ended-support-for-eclipse-3-dot-6/"/>
    <updated>2013-04-11T09:48:00+02:00</updated>
    <id>http://erlide.org/blog/2013/04/11/ended-support-for-eclipse-3-dot-6</id>
    <content type="html"><![CDATA[<p>Starting today, we are no longer supporting Eclipse 3.6. The last version that does that is 0.21.0. The new target is 3.7.</p>

<p>If you for some reason must use 3.6 and want to keep updated, please contact us. We could be convinced to revert this decision.</p>

<p>The new version will be available early next week.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Problems at first start]]></title>
    <link href="http://erlide.org/blog/2013/03/10/problems-at-first-start/"/>
    <updated>2013-03-10T14:32:00+01:00</updated>
    <id>http://erlide.org/blog/2013/03/10/problems-at-first-start</id>
    <content type="html"><![CDATA[<p>Erlide requires a functioning Erlang runtime, or it crashes and/or hangs the whole Eclipse.
This can happen when starting for the first time in a workspace and we&rsquo;re working to fix it.</p>

<p>Sometimes you can&rsquo;t even get to the dialog where the runtimes are configured&hellip; The good news is
that there is a workaround: in your <code>eclipse.ini</code> file (in the Eclipse directory), add the following
line at the end:</p>

<pre><code>-Derlide.runtime=/path/to/your/erlang/installation/directory
</code></pre>

<!--more-->


<p>Note that the top Erlang directory should be referenced (<code>$ERL_TOP</code>). This is not needed if your Erlang installation is in a &ldquo;standard&rdquo; place, like</p>

<ul>
<li>c:\program files</li>
<li>c:\program files (x86)</li>
<li>/usr</li>
<li>/usr/lib</li>
<li>/usr/lib64</li>
<li>/usr/local</li>
<li>/usr/local/lib</li>
<li>/Library/Frameworks/erlang/Versions</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Architecture]]></title>
    <link href="http://erlide.org/blog/2013/02/21/architecture/"/>
    <updated>2013-02-21T08:51:00+01:00</updated>
    <id>http://erlide.org/blog/2013/02/21/architecture</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve done recently a lot of changes to the plugin structure, which I
think could be called &ldquo;architectural changes&rdquo;. The goal is to separate
the different concerns and make it easier to reason about them and
test them in isolation.<!--more--></p>

<p>At the moment we have three kinds of plugins:</p>

<ul>
<li><em>libraries</em>: just wrappers for third-party libraries. These are:
<code>libs</code>, <code>guava</code></li>
<li><em>core</em>: a stack of plugins that have no eclipse dependencies except
those needed to make them work as plugins, declaring and using
extension points. These are: <code>util</code>, <code>runtime</code> and <code>model</code>, plus
the <code>kernel.*</code> ones.</li>
<li><em>eclipse-based</em>: plugins that match those in core, but have
eclipse-based APIs: <code>util_eclipse</code>, <code>backend</code>, <code>core</code>, <code>ui</code></li>
</ul>


<p>The <code>runtime</code>/<code>backend</code> plugins handle starting and connecting to
Erlang nodes, to be used either internally or to execute/debug the
user&rsquo;s code.</p>

<p>The <code>model</code> is where all the interesting stuff happens. It keeps track
of the structure of projects and modules and will provide an API to
ask questions about it. At the moment it is implemented in both Java
and Erlang and this is what has caused many of our problems so far:
the impedance mismatch makes it easy for errors to sneak in. Our plan
is to evolve a one-language implementation with an independent
API. Ideally we would like to be able to use either Java only
(with Xtext) or Erlang only.</p>

<p><code>core</code> will adapt the <code>model</code> API to use Eclipse concepts, like
resources. Together with <code>ui</code> it will also implement the Eclipse
hooks, commands and views necessary to make everything work. Ideally
this part will be quite language-independent.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Development status]]></title>
    <link href="http://erlide.org/blog/2013/02/16/development-status/"/>
    <updated>2013-02-16T22:16:00+01:00</updated>
    <id>http://erlide.org/blog/2013/02/16/development-status</id>
    <content type="html"><![CDATA[<p>I thought it would be nice to write a report on what has been going on and what we are doing at the moment.</p>

<p>Since quite a long time ago, we started being hampered in our progress by (basically) the fact that the code
base has grown organically into a mess. This makes it hard to change without creating follow-up problems and
it makes it hard/slow to test. So for some year ago I sketched a plan for how to address this.</p>

<!-- more -->


<p>One of the alternatives and the one we drove the last half of last year, is to start using Xtext, an Eclipse
framework for developing language support (<a href="http://xtext.org">xtext.org</a>). It was all nice and dandy, until
we discovered that there were performance problems for large projects (which our main user base has). These
problems we could not solve right away and we decided to wait and see how Xtext evolves.</p>

<p>We returned to the &ldquo;old&rdquo; codebase and started to implement the changes needed to make it easier to
understand, less fragile and more testable. This is an ongoing process and it will be quite dramatic. If
anyone is keeping track of the code, the most visible thing happening is that there are several new plugins.
Code is getting moved from one plugin to another and we might even split up the wrangler, cover and trace
features into their own repositories. This will mess up the git history a bit, but it is necessary.</p>

<p>The vision is that when we are ready, we will have all the core functionality nicely packaged and independent
of Eclipse, hopefully implemented completely in Erlang. There&rsquo;s a long way there, though.</p>

<p>Some highlights of the current state of affairs:</p>

<ul>
<li>we have finally fixed some problems that have haunted us for a long time, where the Erlang backend would
crash. From version 0.19 you should see a much stabler application</li>
<li>we are soon going to set Eclipse 3.7 as the minimum supported base</li>
<li>we have support for R16</li>
<li>in the nearest timeframe there won&rsquo;t be many new features, but we focus on fixing bugs and improving
stability and testability of the code base</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Started a blog]]></title>
    <link href="http://erlide.org/blog/2013/02/16/started-a-blog/"/>
    <updated>2013-02-16T12:16:00+01:00</updated>
    <id>http://erlide.org/blog/2013/02/16/started-a-blog</id>
    <content type="html"><![CDATA[<p>I have changed the site generation from <a href="http://github.com/mojombo/jekyll">Jekyll</a> to
<a href="http://octopress.org/">Octopress</a> and decided to start blogging here too. There was
a blog at Blogger, but it feels better to have it all in one place. I even imported
a couple of the old entries that feel relevant.</p>

<p>Hopefully I will manage to provide interesting posts a little more often than before :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retrieving a feature's version number in Eclipse]]></title>
    <link href="http://erlide.org/blog/2010/06/19/retrieving-a-features-version-number-in-eclipse/"/>
    <updated>2010-06-19T00:00:00+02:00</updated>
    <id>http://erlide.org/blog/2010/06/19/retrieving-a-features-version-number-in-eclipse</id>
    <content type="html"><![CDATA[<p>I wanted to print in the log my feature&rsquo;s version number, but was stumped because features aren&rsquo;t OSGi bundles and
there wasn&rsquo;t an obvious way to find them. <!-- more --> After realizing that the <code>About</code> dialog displays the features, I looked
at its code and extracted this snippet:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">IBundleGroupProvider</span><span class="o">[]</span> <span class="n">providers</span> <span class="o">=</span> <span class="n">Platform</span><span class="o">.</span><span class="na">getBundleGroupProviders</span><span class="o">();</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">providers</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="n">IBundleGroupProvider</span> <span class="n">provider</span> <span class="o">:</span> <span class="n">providers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">IBundleGroup</span><span class="o">[]</span> <span class="n">bundleGroups</span> <span class="o">=</span> <span class="n">provider</span><span class="o">.</span><span class="na">getBundleGroups</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">IBundleGroup</span> <span class="n">group</span> <span class="o">:</span> <span class="n">bundleGroups</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">group</span><span class="o">.</span><span class="na">getIdentifier</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">featureId</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">version</span> <span class="o">=</span> <span class="n">group</span><span class="o">.</span><span class="na">getVersion</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Towards erlide 2.0: it's not only about code]]></title>
    <link href="http://erlide.org/blog/2009/08/26/towards-erlide-20-its-not-only-about-code/"/>
    <updated>2009-08-26T00:00:00+02:00</updated>
    <id>http://erlide.org/blog/2009/08/26/towards-erlide-20-its-not-only-about-code</id>
    <content type="html"><![CDATA[<p>Writing code is of course an important part of the development process. In other languages, it is one of
the two pillars, the other one being debugging the code. Erlang, however, is different: <em>an Erlang system
is <strong>alive</strong></em>, and thus it&rsquo;s just as important to be able to architect and monitor it.</p>

<!-- more -->


<p>Of course these activities could be placed under the two other categories, but I dare to claim that they
are sufficiently different from &ldquo;normal&rdquo; coding and &ldquo;normal&rdquo; debugging that they can stand on their own.</p>

<p>&ldquo;What&rsquo;s the fuss about? We have that already!&rdquo; I hear someone mutter there in the back. Um, yes, but
there&rsquo;s always room for improvement. There are no tools to help with the architecture of the system
and there are almost none to watch it running. Here are some examples:</p>

<ul>
<li>visualize and edit the supervisor structure as well as the links and monitors between processes. With
a graphical tool, I mean something like right click and add a child, drag and drop from it to create a
link to another process, mark the process as trapping exits, and so on. This would of course get saved
into the appropriate code modules.</li>
<li>freeze execution of all application processes and inspect them without fearing that timeouts will kill
them</li>
<li>&ldquo;sandboxes&rdquo; for processes, allowing all to be killed and the application restarted without affecting
unrelated processes</li>
<li>trace messages live, at full or reduced speed or step-by-step. This could also be done offline, from
the logs, but then the processes&#8217; data can&rsquo;t be accessed.</li>
</ul>


<p>Some of these features require extensive support from the VM, so it becomes a matter of how useful these
tools will prove themselves at paying customer&rsquo;s site. Which is difficult to find out before having a tool
to test, but I am hopeful that there will be a way out of the deadlock (maybe we can build a good enough
tool without VM support to use as demo).</p>

<p>I will explore this path further, I think we can get more developer productivity gains from this kind of
tooling than from the usual coding and debugging support.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[erlide internals: What is a backend?]]></title>
    <link href="http://erlide.org/blog/2009/03/12/erlide-internals-what-is-a-backend/"/>
    <updated>2009-03-12T00:00:00+01:00</updated>
    <id>http://erlide.org/blog/2009/03/12/erlide-internals-what-is-a-backend</id>
    <content type="html"><![CDATA[<p>The term &ldquo;backend&rdquo; is used often in erlide, but it might be unclear what it really means.</p>

<p>What we call a backend is an Erlang runtime that we&rsquo;re connected to via an internal Java node.
This connection requires some erlide code to be installed and running on the Erlang side.</p>

<!-- more -->


<p>There are two kinds of backends: <em>managed</em> and <em>standalone</em>. Managed ones have their lifecycle
controlled by erlide. Standalone ones use already started erlang nodes.</p>

<p>Inside erlide, backends are used for several purposes:</p>

<ul>
<li>for the IDE internals: scanning, parsing, etc. This is always a managed backend.</li>
<li>for compiling code</li>
<li>for running and debugging the applications</li>
</ul>


<p>There are several reasons for having them separated. One is to isolate functionality (especially
in early erlide versions, it was easy to have the IDE hang for some crash in the builder, or the
other way around). Another is that one might want to run the IDE on the latest and greatest
Erlang version, but compile the project for some older version, while still testing it on all
newer versions available.</p>
]]></content>
  </entry>
  
</feed>
